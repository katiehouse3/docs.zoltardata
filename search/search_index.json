{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Zoltar - The Forecast Archive Welcome to the documentation site for Zoltar , a system developed by the Reich Lab in the Department of Biostatistics and Epidemiology at the University of Massachusetts Amherst to store timeseries forecasts along with tools to browse, analyze, visualize, and score them. Introduction Zoltar is a web application to develop ideas for a repository of model forecast results. Until now, predictions made by models have been stored in differing formats and locations. This complicates tracking, comparing, and revisiting forecasts. Zoltar supports storing, retrieving, comparing, and analyzing time series forecasts for prediction challenges of interest to the modeling community. Assumptions/Limitations The scope of this first iteration is limited in these ways: Process-agnostic : By storing only core datasets, we make no assumptions about ML processes behind a model\u2019s forecast, such as how it\u2019s fit. Enforceability : There is currently not a method in place to test whether the models were fit on the right data subsets (this is something that the below ForecastFramework integration could help with). Unrevised vs. revised data : A Project\u2019s core dataset may or may not include data revisions, such as those used to model or forecast reporting delays. Each project should give specific instructions on what type of data (revised vs. unrevised) is used in the training and testing phases of the forecasting. Model instances : The system stores only model metadata, rather than computable representations of models (internals) that could be used to reconstruct and re-run them. Reports : Some projects generate automated narrative reports from forecast data. This system does not support storing reports with their models. Training/testing data : The only information about what subsets of the core data were used for different ML stages (e.g. training vs testing) will be stored in narrative format in the project description. Reproducibility : Since this system stores data involved in forecasts and not source code, information about how to re-run models is only captured in narrative form in the model's description, and is linked to by the model's url field. Metrics : This version does not capture metric information. If metrics change, then a new project should be created. Funding This work has been supported by the National Institutes of General Medical Sciences (R35GM119582). The content is solely the responsibility of the authors and does not necessarily represent the official views of NIGMS, or the National Institutes of Health. Contact If you have questions about this site or want an account, please contact Professor Nicholas Reich (nick@schoolph.umass.edu), director of the Reich Lab .","title":"Home"},{"location":"#zoltar-the-forecast-archive","text":"Welcome to the documentation site for Zoltar , a system developed by the Reich Lab in the Department of Biostatistics and Epidemiology at the University of Massachusetts Amherst to store timeseries forecasts along with tools to browse, analyze, visualize, and score them.","title":"Zoltar - The Forecast Archive"},{"location":"#introduction","text":"Zoltar is a web application to develop ideas for a repository of model forecast results. Until now, predictions made by models have been stored in differing formats and locations. This complicates tracking, comparing, and revisiting forecasts. Zoltar supports storing, retrieving, comparing, and analyzing time series forecasts for prediction challenges of interest to the modeling community.","title":"Introduction"},{"location":"#assumptionslimitations","text":"The scope of this first iteration is limited in these ways: Process-agnostic : By storing only core datasets, we make no assumptions about ML processes behind a model\u2019s forecast, such as how it\u2019s fit. Enforceability : There is currently not a method in place to test whether the models were fit on the right data subsets (this is something that the below ForecastFramework integration could help with). Unrevised vs. revised data : A Project\u2019s core dataset may or may not include data revisions, such as those used to model or forecast reporting delays. Each project should give specific instructions on what type of data (revised vs. unrevised) is used in the training and testing phases of the forecasting. Model instances : The system stores only model metadata, rather than computable representations of models (internals) that could be used to reconstruct and re-run them. Reports : Some projects generate automated narrative reports from forecast data. This system does not support storing reports with their models. Training/testing data : The only information about what subsets of the core data were used for different ML stages (e.g. training vs testing) will be stored in narrative format in the project description. Reproducibility : Since this system stores data involved in forecasts and not source code, information about how to re-run models is only captured in narrative form in the model's description, and is linked to by the model's url field. Metrics : This version does not capture metric information. If metrics change, then a new project should be created.","title":"Assumptions/Limitations"},{"location":"#funding","text":"This work has been supported by the National Institutes of General Medical Sciences (R35GM119582). The content is solely the responsibility of the authors and does not necessarily represent the official views of NIGMS, or the National Institutes of Health.","title":"Funding"},{"location":"#contact","text":"If you have questions about this site or want an account, please contact Professor Nicholas Reich (nick@schoolph.umass.edu), director of the Reich Lab .","title":"Contact"},{"location":"Api/","text":"API Zoltar's functionality is accessible via the following RESTful endpoints. All results are JSON. The API is browsable from the root URI on the home page (look for API buttons on any page), and is a great starting point for developers. Note that all projects and users are listed on the home page, but private projects, their models, and their forecasts, can only be accessed by authorized accounts. Endpoints: api/ # browsable API root api/projects/ # list of all projects api/project/[project_id]/ # project detail api/project/[project_id]/template/ # template detail api/project/[project_id]/template_data/ # template, formatted as JSON - see above api/project/[project_id]/truth/ # truth detail api/project/[project_id]/truth_data/ # truth data api/user/[user_id]/ # user detail api/model/[model_id]/ # model detail api/forecast/[forecast_id]/ # forecast detail api/forecast/[forecast_id]/data/ # forecast data as JSON - see above","title":"RESTful API"},{"location":"Api/#api","text":"Zoltar's functionality is accessible via the following RESTful endpoints. All results are JSON. The API is browsable from the root URI on the home page (look for API buttons on any page), and is a great starting point for developers. Note that all projects and users are listed on the home page, but private projects, their models, and their forecasts, can only be accessed by authorized accounts. Endpoints: api/ # browsable API root api/projects/ # list of all projects api/project/[project_id]/ # project detail api/project/[project_id]/template/ # template detail api/project/[project_id]/template_data/ # template, formatted as JSON - see above api/project/[project_id]/truth/ # truth detail api/project/[project_id]/truth_data/ # truth data api/user/[user_id]/ # user detail api/model/[model_id]/ # model detail api/forecast/[forecast_id]/ # forecast detail api/forecast/[forecast_id]/data/ # forecast data as JSON - see above","title":"API"},{"location":"Concepts/","text":"Zoltar concepts todo","title":"Concepts"},{"location":"Concepts/#zoltar-concepts","text":"todo","title":"Zoltar concepts"},{"location":"DataAnalysis/","text":"Data analysis Zoltar provides two fledgling project analysis tools: visualizations and scores. You will find links to them on project detail pages on the Analysis line in the project details section at the top of the page. Visualizations This page uses the D3 Foresight component 's TimeChart to display the project's models' forecasts for each step ahead target. Currently we only use the basic plot feature along with the actual component. We plan to add baseline, history, and other features. To use the chart: Select a location and season from the drop downs. (Note that selecting a season will reload the page, which can take a long time for large projects.) Click the plot area to move the current time zero, indicated by the vertical division between gray on the left and white on the right. The plot shows the step ahead target predictions for each model. Hover over the plot to see details. The legend shows model names, and allows showing or hiding them. Hover over a model name for details, and click the link button to show model details in a separate Zoltar page. Click the left and right arrows to the right of the legend to move the current time zero. Click the 'hamburger' icon to toggle the legend. Scores This page shows the mean absolute error values for all models in the project. (This can take a long time to load for large projects.) The location and season drop downs work like those on the visualization page. The smallest errors are shown in inverse text.","title":"Data analysis"},{"location":"DataAnalysis/#data-analysis","text":"Zoltar provides two fledgling project analysis tools: visualizations and scores. You will find links to them on project detail pages on the Analysis line in the project details section at the top of the page.","title":"Data analysis"},{"location":"DataAnalysis/#visualizations","text":"This page uses the D3 Foresight component 's TimeChart to display the project's models' forecasts for each step ahead target. Currently we only use the basic plot feature along with the actual component. We plan to add baseline, history, and other features. To use the chart: Select a location and season from the drop downs. (Note that selecting a season will reload the page, which can take a long time for large projects.) Click the plot area to move the current time zero, indicated by the vertical division between gray on the left and white on the right. The plot shows the step ahead target predictions for each model. Hover over the plot to see details. The legend shows model names, and allows showing or hiding them. Hover over a model name for details, and click the link button to show model details in a separate Zoltar page. Click the left and right arrows to the right of the legend to move the current time zero. Click the 'hamburger' icon to toggle the legend.","title":"Visualizations"},{"location":"DataAnalysis/#scores","text":"This page shows the mean absolute error values for all models in the project. (This can take a long time to load for large projects.) The location and season drop downs work like those on the visualization page. The smallest errors are shown in inverse text.","title":"Scores"},{"location":"DataModel/","text":"Data model todo Projects, Forecast Models, Forecasts, Predictions, and Prediction subclasses: PointPrediction, NamedDistribution, and EmpiricalDistributions (abstract): BinLwrDistribution, SampleDistribution, BinCatDistribution, SampleCatDistribution, and BinaryDistribution.","title":"Data model"},{"location":"DataModel/#data-model","text":"todo Projects, Forecast Models, Forecasts, Predictions, and Prediction subclasses: PointPrediction, NamedDistribution, and EmpiricalDistributions (abstract): BinLwrDistribution, SampleDistribution, BinCatDistribution, SampleCatDistribution, and BinaryDistribution.","title":"Data model"},{"location":"DeveloperIntro/","text":"Developer Introduction todo","title":"Introduction"},{"location":"DeveloperIntro/#developer-introduction","text":"todo","title":"Developer Introduction"},{"location":"FileFormats/","text":"File Formats Zoltar uses a number of formats for representing truth data, forecasts, configurations, etc. This page documents those. Project creation configuration (JSON) As an alternative to manually creating a project via the web interface, projects can be created from a JSON configuration file. You can find an example at cdc-project.json . The file contains eight metadata keys ( name , is_public , description , home_url , logo_url , core_data , time_interval_type , visualization_y_label ), plus three keys that are lists of objects ( locations , targets , and timezeros ). The metadata values' meanings are self-evident except for these two: time_interval_type : Either Week , Biweek , or Month . visualization_y_label : Used by the D3 component to label the Y axis. Here are the three list object keys: locations name : The name of the location. targets name : Target name. description : `` description. unit : `` unit. is_date : true if this is a date-based target (e.g., \"Season onset\"), and false otherwise. is_step_ahead : true if this is a step ahead target (e.g., \"1 wk ahead\"), and false otherwise. step_ahead_increment : Applicable when is_step_ahead is true , is an integer specifying how many time steps ahead the Target is. Can be negative, zero, or positive. point_value_type : Used when importing forecasts into the database, indicates the data type of point values, and is either INTEGER , FLOAT , or TEXT . prediction_types : A list of strings that indicate type type of Predictions that apply to this target. The choices are: BinCat , BinLwr , Binary , Named , Point , Sample , and SampleCat . Note: If prediction_types includes BinLwr , then an additional field is required: lwr : A list of lower bin values (numbers) that are used to xx. timezeros timezero_date : The timezero's date in yyyymmdd format. data_version_date : Optional data version date in the same format. Pass null if the timezero does not have one. is_season_start : true if this starts a season, and false otherwise. season_name : Applicable when is_season_start is true , names the season, e.g., \"2010-2011\". Score download format (CSV) There is one column per ScoreValue BUT: all Scores are on one line. Thus, the row key is the (fixed) first five columns: `ForecastModel.abbreviation | ForecastModel.name , TimeZero.timezero_date, season, Location.name, Target.name` Followed on the same line by a variable number of ScoreValue.value columns, one for each Score. Score names are in the header. An example header and first few rows: model, timezero, season, location, target, constant score, Absolute Error gam_lag1_tops3, 20170423, 2017-2018 TH01, 1_biweek_ahead, 1 <blank> gam_lag1_tops3, 20170423, 2017-2018 TH01, 1_biweek_ahead, <blank> 2 gam_lag1_tops3, 20170423, 2017-2018 TH01, 2_biweek_ahead, <blank> 1 gam_lag1_tops3, 20170423, 2017-2018 TH01, 3_biweek_ahead, <blank> 9 gam_lag1_tops3, 20170423, 2017-2018 TH01, 4_biweek_ahead, <blank> 6 gam_lag1_tops3, 20170423, 2017-2018 TH01, 5_biweek_ahead, <blank> 8 gam_lag1_tops3, 20170423, 2017-2018 TH02, 1_biweek_ahead, <blank> 6 gam_lag1_tops3, 20170423, 2017-2018 TH02, 2_biweek_ahead, <blank> 6 gam_lag1_tops3, 20170423, 2017-2018 TH02, 3_biweek_ahead, <blank> 37 gam_lag1_tops3, 20170423, 2017-2018 TH02, 4_biweek_ahead, <blank> 25 gam_lag1_tops3, 20170423, 2017-2018 TH02, 5_biweek_ahead, <blank> 62 Notes: - `season` is each TimeZero`s containing season_name, similar to Project.timezeros_in_season(). - for the model column we use the model`s abbreviation if it`s not empty, otherwise we use its name - NB: we were using get_valid_filename() to ensure values are CSV-compliant, i.e., no commas, returns, tabs, etc. (a function that was as good as any), but we removed it to help performance in the loop - we use groupby to group row `keys` so that all score values are together Truth data format (CSV) CSV format A header must be included One csv file/project, which includes timezeros across all seasons columns: timezero , location , target , value timezeros are formatted yyyymmdd For date-based onset or peak targets, values must be dates in the same format as timezeros, rather than project-specific time intervals such as an epidemic week. Validation: Every timezero in the csv file must have a matching one in the project. Note that the inverse is not necessarily true, such as in the case above of missing timezeros. Every location in the csv file must a matching one in the Project. Ditto for every target. Forecast data format (JSON) For prediction input and output we use a dictionary structure suitable for JSON I/O. The dict is called a JSON IO dict in code documentation. See predictions-example.json for an example. Functions that accept a json_io_dict include: load_predictions_from_json_io_dict() . Functions that return a json_io_dict include: json_io_dict_from_forecast() and json_io_dict_from_cdc_csv_file() . This format is strongly inspired by https://github.com/cdcepi/predx/blob/master/predx_classes.md . Briefly, the dict has four top level keys: forecast : a metadata dict about the file's forecast. has these keys: id , forecast_model_id , source , created_at , and time_zero . Some or all of these keys might be ignored by functions that accept a JSON IO dict. locations : a list of location dicts , each of which has just a name key whose value is the name of a location in the below predictions section. targets : a list of target dicts , each of which has the following fields. The fields are: name , description , unit , is_date , is_step_ahead , and step_ahead_increment . predictions : a list of prediction dicts that contains the prediction data. Each dict has these fields: location : name of the Location. target : name of the Target. class : the type of prediction this is. It is an abbreviation of the corresponding Prediction subclass - the names are : BinCat , BinLwr , Binary , Named , Point , Sample , and SampleCat . prediction : a class-specific dict containing the prediction data itself. the format varies according to class. See https://github.com/cdcepi/predx/blob/master/predx_classes.md for details. Here is a summary: BinCat : Binned distribution with a category for each bin. is a two-column table represented by two keys, one per column: cat and prob . They are paired, i.e., have the same number of rows. BinLwr : Binned distribution defined by inclusive lower bounds for each bin. Similar to BinCat , but has these two keys: lwr and prob . Binary : Binary distribution with a single prob key. Named : A named distribution with four fields: family and param1 through param3 . family names must be one of : norm , lnorm , gamma , beta , bern , binom , pois , nbinom , and nbinom2 . Point : A numeric point prediction with a single value key. Sample : Numeric samples represented as a table with one column that is found in the sample key. SampleCat : Character string samples from categories. Similar to BinCat , but has these two keys: cat and sample .","title":"File Formats"},{"location":"FileFormats/#file-formats","text":"Zoltar uses a number of formats for representing truth data, forecasts, configurations, etc. This page documents those.","title":"File Formats"},{"location":"FileFormats/#project-creation-configuration-json","text":"As an alternative to manually creating a project via the web interface, projects can be created from a JSON configuration file. You can find an example at cdc-project.json . The file contains eight metadata keys ( name , is_public , description , home_url , logo_url , core_data , time_interval_type , visualization_y_label ), plus three keys that are lists of objects ( locations , targets , and timezeros ). The metadata values' meanings are self-evident except for these two: time_interval_type : Either Week , Biweek , or Month . visualization_y_label : Used by the D3 component to label the Y axis. Here are the three list object keys:","title":"Project creation configuration (JSON)"},{"location":"FileFormats/#locations","text":"name : The name of the location.","title":"locations"},{"location":"FileFormats/#targets","text":"name : Target name. description : `` description. unit : `` unit. is_date : true if this is a date-based target (e.g., \"Season onset\"), and false otherwise. is_step_ahead : true if this is a step ahead target (e.g., \"1 wk ahead\"), and false otherwise. step_ahead_increment : Applicable when is_step_ahead is true , is an integer specifying how many time steps ahead the Target is. Can be negative, zero, or positive. point_value_type : Used when importing forecasts into the database, indicates the data type of point values, and is either INTEGER , FLOAT , or TEXT . prediction_types : A list of strings that indicate type type of Predictions that apply to this target. The choices are: BinCat , BinLwr , Binary , Named , Point , Sample , and SampleCat . Note: If prediction_types includes BinLwr , then an additional field is required: lwr : A list of lower bin values (numbers) that are used to xx.","title":"targets"},{"location":"FileFormats/#timezeros","text":"timezero_date : The timezero's date in yyyymmdd format. data_version_date : Optional data version date in the same format. Pass null if the timezero does not have one. is_season_start : true if this starts a season, and false otherwise. season_name : Applicable when is_season_start is true , names the season, e.g., \"2010-2011\".","title":"timezeros"},{"location":"FileFormats/#score-download-format-csv","text":"There is one column per ScoreValue BUT: all Scores are on one line. Thus, the row key is the (fixed) first five columns: `ForecastModel.abbreviation | ForecastModel.name , TimeZero.timezero_date, season, Location.name, Target.name` Followed on the same line by a variable number of ScoreValue.value columns, one for each Score. Score names are in the header. An example header and first few rows: model, timezero, season, location, target, constant score, Absolute Error gam_lag1_tops3, 20170423, 2017-2018 TH01, 1_biweek_ahead, 1 <blank> gam_lag1_tops3, 20170423, 2017-2018 TH01, 1_biweek_ahead, <blank> 2 gam_lag1_tops3, 20170423, 2017-2018 TH01, 2_biweek_ahead, <blank> 1 gam_lag1_tops3, 20170423, 2017-2018 TH01, 3_biweek_ahead, <blank> 9 gam_lag1_tops3, 20170423, 2017-2018 TH01, 4_biweek_ahead, <blank> 6 gam_lag1_tops3, 20170423, 2017-2018 TH01, 5_biweek_ahead, <blank> 8 gam_lag1_tops3, 20170423, 2017-2018 TH02, 1_biweek_ahead, <blank> 6 gam_lag1_tops3, 20170423, 2017-2018 TH02, 2_biweek_ahead, <blank> 6 gam_lag1_tops3, 20170423, 2017-2018 TH02, 3_biweek_ahead, <blank> 37 gam_lag1_tops3, 20170423, 2017-2018 TH02, 4_biweek_ahead, <blank> 25 gam_lag1_tops3, 20170423, 2017-2018 TH02, 5_biweek_ahead, <blank> 62 Notes: - `season` is each TimeZero`s containing season_name, similar to Project.timezeros_in_season(). - for the model column we use the model`s abbreviation if it`s not empty, otherwise we use its name - NB: we were using get_valid_filename() to ensure values are CSV-compliant, i.e., no commas, returns, tabs, etc. (a function that was as good as any), but we removed it to help performance in the loop - we use groupby to group row `keys` so that all score values are together","title":"Score download format (CSV)"},{"location":"FileFormats/#truth-data-format-csv","text":"CSV format A header must be included One csv file/project, which includes timezeros across all seasons columns: timezero , location , target , value timezeros are formatted yyyymmdd For date-based onset or peak targets, values must be dates in the same format as timezeros, rather than project-specific time intervals such as an epidemic week. Validation: Every timezero in the csv file must have a matching one in the project. Note that the inverse is not necessarily true, such as in the case above of missing timezeros. Every location in the csv file must a matching one in the Project. Ditto for every target.","title":"Truth data format (CSV)"},{"location":"FileFormats/#forecast-data-format-json","text":"For prediction input and output we use a dictionary structure suitable for JSON I/O. The dict is called a JSON IO dict in code documentation. See predictions-example.json for an example. Functions that accept a json_io_dict include: load_predictions_from_json_io_dict() . Functions that return a json_io_dict include: json_io_dict_from_forecast() and json_io_dict_from_cdc_csv_file() . This format is strongly inspired by https://github.com/cdcepi/predx/blob/master/predx_classes.md . Briefly, the dict has four top level keys: forecast : a metadata dict about the file's forecast. has these keys: id , forecast_model_id , source , created_at , and time_zero . Some or all of these keys might be ignored by functions that accept a JSON IO dict. locations : a list of location dicts , each of which has just a name key whose value is the name of a location in the below predictions section. targets : a list of target dicts , each of which has the following fields. The fields are: name , description , unit , is_date , is_step_ahead , and step_ahead_increment . predictions : a list of prediction dicts that contains the prediction data. Each dict has these fields: location : name of the Location. target : name of the Target. class : the type of prediction this is. It is an abbreviation of the corresponding Prediction subclass - the names are : BinCat , BinLwr , Binary , Named , Point , Sample , and SampleCat . prediction : a class-specific dict containing the prediction data itself. the format varies according to class. See https://github.com/cdcepi/predx/blob/master/predx_classes.md for details. Here is a summary: BinCat : Binned distribution with a category for each bin. is a two-column table represented by two keys, one per column: cat and prob . They are paired, i.e., have the same number of rows. BinLwr : Binned distribution defined by inclusive lower bounds for each bin. Similar to BinCat , but has these two keys: lwr and prob . Binary : Binary distribution with a single prob key. Named : A named distribution with four fields: family and param1 through param3 . family names must be one of : norm , lnorm , gamma , beta , bern , binom , pois , nbinom , and nbinom2 . Point : A numeric point prediction with a single value key. Sample : Numeric samples represented as a table with one column that is found in the sample key. SampleCat : Character string samples from categories. Similar to BinCat , but has these two keys: cat and sample .","title":"Forecast data format (JSON)"},{"location":"ForecastDetailPage/","text":"Forecast detail page The forecast detail pages shows information about a particular forecast, and is divided into two vertical sections, described next: Details table and Prediction information . Here's an example forecast detail page: Forecast details table At the top of the page is a table showing information related to the forecast: Model : A link to the owning model . TimeZero : The time-zero in the owning project that this forecast is for. Data Source : The name of the \"source\" of this forecast, which is typically a file name. Upload Date : Date the forecast was uploaded to Zoltar. Predictions The Predictions section summarizes the counts of the seven different prediction types that can be associated with a forecast. See Data Model for more information on how forecast data is modeled.","title":"Forecast detail page"},{"location":"ForecastDetailPage/#forecast-detail-page","text":"The forecast detail pages shows information about a particular forecast, and is divided into two vertical sections, described next: Details table and Prediction information . Here's an example forecast detail page:","title":"Forecast detail page"},{"location":"ForecastDetailPage/#forecast-details-table","text":"At the top of the page is a table showing information related to the forecast: Model : A link to the owning model . TimeZero : The time-zero in the owning project that this forecast is for. Data Source : The name of the \"source\" of this forecast, which is typically a file name. Upload Date : Date the forecast was uploaded to Zoltar.","title":"Forecast details table"},{"location":"ForecastDetailPage/#predictions","text":"The Predictions section summarizes the counts of the seven different prediction types that can be associated with a forecast. See Data Model for more information on how forecast data is modeled.","title":"Predictions"},{"location":"HomePage/","text":"Zoltar Home page The Zoltar home page zoltardata.com lists all of the projects in the archive. A project is a collection of forecast models and their forecasts , and is described in more detail below. The home page shows basic project information, including name, owner, description, and (in the \"Objects\" column) a summary of the number of models and forecasts in the project. (This number is an estimate, but may include actual row counts.) Currently the site looks something like this: At the page's top is a header that's shown on all pages. It contains three icons: Home page (the Zoltar crystal ball in the upper left), and on the right a user drop down menu and a help icon (question mark) on the far right. The drop down menu's appearance depends on whether a user is logged in. If so then it's text is the user name and the menu items are links to the user profile page, and a logout item. If the user is not logged in then \"Sign in\" is shown. Clicking it takes you to a typical login page where you specify your account's user name and password. (To obtain an account, please contact us .) From this page you can: Log in to your account (see the note above). Click on a project name to go to its detail page . Create a project. (Any logged in user can create projects via the \"New\" button towards the top. Clicking it will take you to a form where you can fill in the details described below.)","title":"Zoltar Home page"},{"location":"HomePage/#zoltar-home-page","text":"The Zoltar home page zoltardata.com lists all of the projects in the archive. A project is a collection of forecast models and their forecasts , and is described in more detail below. The home page shows basic project information, including name, owner, description, and (in the \"Objects\" column) a summary of the number of models and forecasts in the project. (This number is an estimate, but may include actual row counts.) Currently the site looks something like this: At the page's top is a header that's shown on all pages. It contains three icons: Home page (the Zoltar crystal ball in the upper left), and on the right a user drop down menu and a help icon (question mark) on the far right. The drop down menu's appearance depends on whether a user is logged in. If so then it's text is the user name and the menu items are links to the user profile page, and a logout item. If the user is not logged in then \"Sign in\" is shown. Clicking it takes you to a typical login page where you specify your account's user name and password. (To obtain an account, please contact us .) From this page you can: Log in to your account (see the note above). Click on a project name to go to its detail page . Create a project. (Any logged in user can create projects via the \"New\" button towards the top. Clicking it will take you to a form where you can fill in the details described below.)","title":"Zoltar Home page"},{"location":"ModelDetailPage/","text":"Model detail page A model is the representation of code that generates forecasts. Clicking on a model link takes you to its detail page. The detail page is divided into two vertical sections, described next: Details table and forecasts list. Here's an example model detail page: Model details table At the top of the page is a table showing information related to the model: Name : The model's name. Abbreviation : A short name for the model. It's used as the column name in downloaded scores. Owner : The model's owner. The owner is the user that created the model (which is done on the home page), and she can edit or delete the model, and upload or delete its forecasts. Project : A link to the project the model belongs to. Team name : The name of the team that developed the model. This is not used directly by Zoltar. Description : Prose provided by model owner. It should include information on reproducing the model's results. Home : A link to the model home page. Auxiliary data : An optional link to model-specific data files that were used by the model beyond the project's core data. Not used directly by Zoltar. Forecasts The Forecasts section lists the model's forecasts, with links to forecast detail pages (see forecast detail page for more information). Each forecast is data associated with a particular time zero in the project. The data is loaded from a file with a specific format (see file formats for details). There is one line per time zero, specifying the time zero date (but not the data version date), the original forecast data source that was uploaded (usually a file name), and an Action button, either a green upload one if there is no data associated with the time zero or a red delete button otherwise. Clicking on the filename link takes you to a forecast detail page that includes a data preview plus a Download button.","title":"Model detail page"},{"location":"ModelDetailPage/#model-detail-page","text":"A model is the representation of code that generates forecasts. Clicking on a model link takes you to its detail page. The detail page is divided into two vertical sections, described next: Details table and forecasts list. Here's an example model detail page:","title":"Model detail page"},{"location":"ModelDetailPage/#model-details-table","text":"At the top of the page is a table showing information related to the model: Name : The model's name. Abbreviation : A short name for the model. It's used as the column name in downloaded scores. Owner : The model's owner. The owner is the user that created the model (which is done on the home page), and she can edit or delete the model, and upload or delete its forecasts. Project : A link to the project the model belongs to. Team name : The name of the team that developed the model. This is not used directly by Zoltar. Description : Prose provided by model owner. It should include information on reproducing the model's results. Home : A link to the model home page. Auxiliary data : An optional link to model-specific data files that were used by the model beyond the project's core data. Not used directly by Zoltar.","title":"Model details table"},{"location":"ModelDetailPage/#forecasts","text":"The Forecasts section lists the model's forecasts, with links to forecast detail pages (see forecast detail page for more information). Each forecast is data associated with a particular time zero in the project. The data is loaded from a file with a specific format (see file formats for details). There is one line per time zero, specifying the time zero date (but not the data version date), the original forecast data source that was uploaded (usually a file name), and an Action button, either a green upload one if there is no data associated with the time zero or a red delete button otherwise. Clicking on the filename link takes you to a forecast detail page that includes a data preview plus a Download button.","title":"Forecasts"},{"location":"ProjectDetailPage/","text":"Project detail page A project is the main element for representing a forecasting challenge. It has an owner (a registered user in the system), and zero or more model owners (also users). A project owner can do anything to the project, including what model owners can do, but model owners are limited to creating, editing, and deleting Models, and uploading and deleting forecasts. (To become a model owner you must contact the project owner.) Each project's detail page is divided into four vertical sections, described next: Details table, forecast models, targets, and time zeros. Currently the top looks something like this. (The project shown is a large one, so only the details table and Models sections are visible.) Project details table At the top of the page is a table showing non-model information related to the project: Summary : The same summary as on the home page: An estimate of the number of models and forecasts in the project. Owner : The user that has full control of the project, and includes authorization to view, edit, and delete anything (models, forecasts, etc.) The owner is the user that created the project (which is done on the home page). Model owners : A list of users who can view the project (applicable only if the project is private), and who can create and delete models, and upload and delete forecasts. The project owner controls specifies model owners when she creates or edits the project. Time Interval Type : Tells the D3 Foresight component what its x-axis label should be. Choices: Week, Biweek, or Month. Visibility : A project can be either public or private, which controls project visibility, including accessing data. This applies to list and detail pages, along with API endpoints. Public projects are available to anybody, users and anonymous visitors included. Private projects can only be viewed by project owners and model owners. This means that in order to grant a user access to a private account, the project owner must add her to the project's model owners list, even if that user will not be managing any models. Description : Prose provided by project owner. It should cover the following topics: Information about the \"real-time-ness\" of data, i.e., revised/unrevised. Details about how models interpret time zeros and data version dates. Data file naming scheme. Home : A link to the project's home page, which might include details about any competitions, source code, team members, included models, etc. Core data : A link to a page that contains data (e.g., CSV files) used to train models. For model competitions, it should include all data sets made available to everyone in the challenge, including supplemental data like Google queries or weather data. Ideally Zoltar users interested in re-running a project's models have all they need in the home and core data directories. However, they are not used directly by Zoltar. Truth data : Similar to the template, this is a data file that the project owner uploads. This data contains observed target values for time zeros and locations in the project, and is a project-agnostic way to capture actual values that models predicted for. It is used to calculate scores, and to extract the 'actual' data used in the D3 component's TimeChart. Each Project is responsible for generating a truth table csv file in a project-specific manner. Details: CSV file No file name restrictions Columns: Timezero , Location , Target , Value - see FileFormats.md . Analysis : Links to visualization and score pages (see below for details). Forecast models The Models section lists the project's forecast models by name, with links to model detail pages (see details below). If you're a project owner or model owner then a \"New\" button is shown that takes you to a form for creating a model. Locations This section lists names of the locations in the project. These were either defined by project owner when creating the project, or were created automatically when the project template was loaded and a referenced location was not found. Here's a screen shot that shows Locations for a particular project, along with the Targets and TimeZeros sections that are described next: Targets This section lists information about project forecast targets. Like locations, these were either created explicitly by the project owner, or automatically when the template was loaded. The information includes the following fields. (A note regarding auto-created targets. Auto-created targets require further, careful editing to be complete. In particular, users must fill in the description and unit fields, identify the date-related ones by checking Is date , and check Is step ahead and fill in the Step ahead increment integer value. Importantly : You will get unwanted results if Is date or Is step ahead is incorrect.) Name : Self-explanatory. Description : \"\". For auto-created targets, this field must be filled in. Unit : E.g., \"percent\" or \"week\". Unit is used when previewing data, and when downloading it. For auto-created targets, ensure that you've entered a unit. Otherwise it will be blank in previews and downloads. Point Value Type : todo Date? : This identifies whether the target is date-related or not. Examples of date-related targets might include \"Season onset\" or \"Season peak week\". For auto-created targets, the consequences of not checking off this field include forecasts being rejected as invalid if they have no point value. Step Ahead? : Shows two pieces of information: 1) Whether the target is a \"step ahead\" one, and (if so) 2) what the \"step ahead increment\" is. (Step ahead targets are used to predict values in the future, and are used by some analysis tools.) Predictions : todo BinLwrs : todo Time zeros This section details the project's time zeros . About time zeros and data version dates : Because the forecasting field does not have standard terminology, we have settled on the following two concepts for this application. Note that some time zeros are tagged as starting a season, specifying the season's name, which helps to segment the time zeros. Zoltar uses season information in the visualization and score pages, where the user can select which season to show data for. This also helps to keep performance up. Time zero : The date from which a forecast originates and to which targets are relative (i.e. a \"2-week-ahead forecast\" is two weeks ahead of the time-zero). Every forecast has a time zero. Data version date : An optional additional piece of metadata for a forecast. If it exists, it is associated with a time-zero. It refers to the latest date at which any data source used for the forecasts should be considered. If present, it can be used externally by system users to recreate model results by \"rolling back\" the core data to a particular state. # Forecasts : A count of the number of forecasts for this time-zero. Starts Season : Shows two pieces of information: 1) Whether the time zero is starts a season (it is blank if it does not start a season), and 2) the season name itself (which indicates the time zero does start a season.)","title":"Project detail page"},{"location":"ProjectDetailPage/#project-detail-page","text":"A project is the main element for representing a forecasting challenge. It has an owner (a registered user in the system), and zero or more model owners (also users). A project owner can do anything to the project, including what model owners can do, but model owners are limited to creating, editing, and deleting Models, and uploading and deleting forecasts. (To become a model owner you must contact the project owner.) Each project's detail page is divided into four vertical sections, described next: Details table, forecast models, targets, and time zeros. Currently the top looks something like this. (The project shown is a large one, so only the details table and Models sections are visible.)","title":"Project detail page"},{"location":"ProjectDetailPage/#project-details-table","text":"At the top of the page is a table showing non-model information related to the project: Summary : The same summary as on the home page: An estimate of the number of models and forecasts in the project. Owner : The user that has full control of the project, and includes authorization to view, edit, and delete anything (models, forecasts, etc.) The owner is the user that created the project (which is done on the home page). Model owners : A list of users who can view the project (applicable only if the project is private), and who can create and delete models, and upload and delete forecasts. The project owner controls specifies model owners when she creates or edits the project. Time Interval Type : Tells the D3 Foresight component what its x-axis label should be. Choices: Week, Biweek, or Month. Visibility : A project can be either public or private, which controls project visibility, including accessing data. This applies to list and detail pages, along with API endpoints. Public projects are available to anybody, users and anonymous visitors included. Private projects can only be viewed by project owners and model owners. This means that in order to grant a user access to a private account, the project owner must add her to the project's model owners list, even if that user will not be managing any models. Description : Prose provided by project owner. It should cover the following topics: Information about the \"real-time-ness\" of data, i.e., revised/unrevised. Details about how models interpret time zeros and data version dates. Data file naming scheme. Home : A link to the project's home page, which might include details about any competitions, source code, team members, included models, etc. Core data : A link to a page that contains data (e.g., CSV files) used to train models. For model competitions, it should include all data sets made available to everyone in the challenge, including supplemental data like Google queries or weather data. Ideally Zoltar users interested in re-running a project's models have all they need in the home and core data directories. However, they are not used directly by Zoltar. Truth data : Similar to the template, this is a data file that the project owner uploads. This data contains observed target values for time zeros and locations in the project, and is a project-agnostic way to capture actual values that models predicted for. It is used to calculate scores, and to extract the 'actual' data used in the D3 component's TimeChart. Each Project is responsible for generating a truth table csv file in a project-specific manner. Details: CSV file No file name restrictions Columns: Timezero , Location , Target , Value - see FileFormats.md . Analysis : Links to visualization and score pages (see below for details).","title":"Project details table"},{"location":"ProjectDetailPage/#forecast-models","text":"The Models section lists the project's forecast models by name, with links to model detail pages (see details below). If you're a project owner or model owner then a \"New\" button is shown that takes you to a form for creating a model.","title":"Forecast models"},{"location":"ProjectDetailPage/#locations","text":"This section lists names of the locations in the project. These were either defined by project owner when creating the project, or were created automatically when the project template was loaded and a referenced location was not found. Here's a screen shot that shows Locations for a particular project, along with the Targets and TimeZeros sections that are described next:","title":"Locations"},{"location":"ProjectDetailPage/#targets","text":"This section lists information about project forecast targets. Like locations, these were either created explicitly by the project owner, or automatically when the template was loaded. The information includes the following fields. (A note regarding auto-created targets. Auto-created targets require further, careful editing to be complete. In particular, users must fill in the description and unit fields, identify the date-related ones by checking Is date , and check Is step ahead and fill in the Step ahead increment integer value. Importantly : You will get unwanted results if Is date or Is step ahead is incorrect.) Name : Self-explanatory. Description : \"\". For auto-created targets, this field must be filled in. Unit : E.g., \"percent\" or \"week\". Unit is used when previewing data, and when downloading it. For auto-created targets, ensure that you've entered a unit. Otherwise it will be blank in previews and downloads. Point Value Type : todo Date? : This identifies whether the target is date-related or not. Examples of date-related targets might include \"Season onset\" or \"Season peak week\". For auto-created targets, the consequences of not checking off this field include forecasts being rejected as invalid if they have no point value. Step Ahead? : Shows two pieces of information: 1) Whether the target is a \"step ahead\" one, and (if so) 2) what the \"step ahead increment\" is. (Step ahead targets are used to predict values in the future, and are used by some analysis tools.) Predictions : todo BinLwrs : todo","title":"Targets"},{"location":"ProjectDetailPage/#time-zeros","text":"This section details the project's time zeros . About time zeros and data version dates : Because the forecasting field does not have standard terminology, we have settled on the following two concepts for this application. Note that some time zeros are tagged as starting a season, specifying the season's name, which helps to segment the time zeros. Zoltar uses season information in the visualization and score pages, where the user can select which season to show data for. This also helps to keep performance up. Time zero : The date from which a forecast originates and to which targets are relative (i.e. a \"2-week-ahead forecast\" is two weeks ahead of the time-zero). Every forecast has a time zero. Data version date : An optional additional piece of metadata for a forecast. If it exists, it is associated with a time-zero. It refers to the latest date at which any data source used for the forecasts should be considered. If present, it can be used externally by system users to recreate model results by \"rolling back\" the core data to a particular state. # Forecasts : A count of the number of forecasts for this time-zero. Starts Season : Shows two pieces of information: 1) Whether the time zero is starts a season (it is blank if it does not start a season), and 2) the season name itself (which indicates the time zero does start a season.)","title":"Time zeros"},{"location":"ResearcherIntro/","text":"Researcher Introduction todo","title":"Introduction"},{"location":"ResearcherIntro/#researcher-introduction","text":"todo","title":"Researcher Introduction"},{"location":"UserIntro/","text":"User Introduction todo","title":"Introduction"},{"location":"UserIntro/#user-introduction","text":"todo","title":"User Introduction"},{"location":"WebTourIntro/","text":"This file takes you through a tour of Zoltar's web interface, located at zoltardata.com . Start the tour by following the links in the navigation menu on the left, ideally in order. You can also use the < and > buttons on this page.","title":"Introduction"},{"location":"ZoltpyOverview/","text":"Zoltpy is a python module that contains functions for working with the Zoltar forecast repository\u2019s API, including projects, models, forecasts, and scores. Please see the GitHub repository for details.","title":"Overview"},{"location":"ZoltrGettingStarted/","text":"","title":"Getting Started"},{"location":"ZoltrOverview/","text":"Zoltr is an R package that contains functions for working with the Zoltar forecast repository\u2019s API, including projects, models, forecasts, and scores. Documentation for the package is at the zoltr pkgdown site .","title":"Overview"},{"location":"ZoltrProjectOwners/","text":"","title":"ProjectOwners"}]}